커미션비율 = COMMISSION_PCT,
매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID)
str(emp)
emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,
이메일 = EMAIL,
전화번호 = PHONE_NUMBER,
채용일 = HIRE_DATE,
업무아이디 = JOB_ID,
연봉 = SALARY,
커미션비율 = COMMISSION_PCT,
매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID)
emp %>% filter(연봉>=10000) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::arrange(desc(연봉)) %>%
View(emp)
head(emp)
emp %>% filter(연봉>=10000) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::arrange(desc(연봉)) %>%
emp %>%
dplyr::filter(연봉<3000) %>%
dplyr::select(이름, 직원아이디, 연봉,보너스) %>%
dplyr::head
emp %>%
dplyr::filter(연봉<3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름, 직원아이디, 연봉,보너스) %>%
emp %>%
dplyr::filter(연봉 < 3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름, 직원아이디, 연봉,보너스) %>%
head
보너스지급내역서 <- emp %>%
dplyr::filter(연봉 < 3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름, 직원아이디, 연봉,보너스) %>%
write.csv(보너스지급내역서)
보너스지급내역서 <- emp %>%
dplyr::filter(연봉 < 3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름, 직원아이디, 연봉,보너스) %>%
head
write.csv(보너스지급내역서)
보너스지급내역서 <- emp %>%
dplyr::filter(연봉 < 3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름, 직원아이디, 연봉,보너스)
write.csv(보너스지급내역서)
rm(보너스지급내역서)
head(보너스지급내역서)
emp <- emp %>%
dplyr::mutate(이름=paste(FIRST_NAME,LAST_NAME))
apply(emp %>% select(연봉),2,max)
emp %>%
dplyr::filter(연봉==24000) %>%
dplyr::select(이름)
apply(emp %>% select(연봉),2,max)
보너스지급내역서 <- emp %>%
dplyr::filter(연봉 < 3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름, 직원아이디, 연봉,보너스)
write.csv(보너스지급내역서)
reg %>%
dplyr::rename(지역아이디 = REGION_ID,지역명 = REGION_NAME)
head(reg)
reg %>%
dplyr::rename(지역아이디 = REGION_ID,지역명 = REGION_NAME)
dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID,부서명 = DEPARTMENT_NAME,매니저아이디 = MANAGER_ID,위치아이디 = LOCATION_ID)
cnt %>%
dplyr::rename(국가아이디 = COUNTRY_ID,국가명 = COUNTRY_NAME,지역아이디 = REGION_ID)
cnt <- data.frame(dbGetQuery(conn, "SELECT * FROM COUNTRIES"))
view(cnt)
tab <-dbGetQuery(conn, "SELECT * FROM TAB")
tname <- tab$TNAME
tname
cnt <- data.frame(dbGetQuery(conn, "SELECT * FROM COUNTRIES"))
dep <- data.frame(dbGetQuery(conn, "SELECT * FROM DEPARTMENTS"))
emp <- data.frame(dbGetQuery(conn, "SELECT * FROM EMPLOYEES"))
empd <- data.frame(dbGetQuery(conn, "SELECT * FROM EMP_DETAILS_VIEW"))
job <- data.frame(dbGetQuery(conn, "SELECT * FROM JOBS"))
jobh <- data.frame(dbGetQuery(conn, "SELECT * FROM JOB_HISTORY"))
loc <- data.frame(dbGetQuery(conn, "SELECT * FROM LOCATIONS"))
reg <- data.frame(dbGetQuery(conn, "SELECT * FROM REGIONS"))
view(cnt)
view(cnt)
View(cnt)
library(rJava)
library(DBI)
library(RJDBC)
library(XML)
library(memoise)
library(KoNLP)
library(wordcloud)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rvest)
library(RColorBrewer)
library(data.table)
library(reshape)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"oracle")
tab <-dbGetQuery(conn, "SELECT * FROM TAB")
tname <- tab$TNAME
tname
cnt <- data.frame(dbGetQuery(conn, "SELECT * FROM COUNTRIES"))
dep <- data.frame(dbGetQuery(conn, "SELECT * FROM DEPARTMENTS"))
emp <- data.frame(dbGetQuery(conn, "SELECT * FROM EMPLOYEES"))
empd <- data.frame(dbGetQuery(conn, "SELECT * FROM EMP_DETAILS_VIEW"))
job <- data.frame(dbGetQuery(conn, "SELECT * FROM JOBS"))
jobh <- data.frame(dbGetQuery(conn, "SELECT * FROM JOB_HISTORY"))
loc <- data.frame(dbGetQuery(conn, "SELECT * FROM LOCATIONS"))
reg <- data.frame(dbGetQuery(conn, "SELECT * FROM REGIONS"))
View(cnt)
cnt %>%
dplyr::rename(국가아이디 = COUNTRY_ID,국가명 = COUNTRY_NAME,지역아이디 = REGION_ID)
dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID,부서명 = DEPARTMENT_NAME,매니저아이디 = MANAGER_ID,위치아이디 = LOCATION_ID)
str(emp)
emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,
이메일 = EMAIL,
전화번호 = PHONE_NUMBER,
채용일 = HIRE_DATE,
업무아이디 = JOB_ID,
연봉 = SALARY,
커미션비율 = COMMISSION_PCT,
매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID)
emp <- emp %>%
dplyr::mutate(이름=paste(FIRST_NAME,LAST_NAME))
if(is.data.frame(emp)){
emp <- subset(emp, select = -c(First_Name, Last_Name))
}
view(emp)
emp <- emp %>%
dplyr::mutate(월급 = 연봉 %/% 12)
View(emp)
job %>%
dplyr::rename(업무아이디 = JOB_ID,업무명 = JOB_TITLE,최소연봉 = MIN_SALARY,최대연봉 = MAX_SALARY)
jobh %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,업무시작일 = START_DATE,업무종료일 = END_DATE,업무아이디 = JOB_ID,부서아이디 = DEPARTMENT_ID)
head(jobh)
loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,거리주소 = STREET_ADDRESS,우편번호 = POSTAL_CODE,도시 = CITY,주 = STATE_PROVINCE,국가아이디 = COUNTRY_ID)
head(loc)
reg %>%
dplyr::rename(지역아이디 = REGION_ID,지역명 = REGION_NAME)
head(reg)
emp %>% filter(연봉>=10000) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::arrange(desc(연봉)) %>%
emp %>% filter(연봉>=10000) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::arrange(desc(연봉)) %>%
View(emp)
emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,
이메일 = EMAIL,
전화번호 = PHONE_NUMBER,
채용일 = HIRE_DATE,
업무아이디 = JOB_ID,
연봉 = SALARY,
커미션비율 = COMMISSION_PCT,
매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID)
emp <- emp %>%
dplyr::mutate(이름=FIRST_NAME+LAST_NAME)
emp <- emp %>%
dplyr::mutate(이름="FIRST_NAME"+"LAST_NAME")
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름,연봉) %>%
dplyr::arrange(desc(연봉))
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(job,by='업무명') %>%
dplyr::filter(연봉>=12000) %>%
dplyr::select(부서명,이름,연봉,업무명) %>%
dplyr::arrange(desc(연봉))
emp %>%
dplyr::left_join(dep, by='부서아이디') %>%
dplyr::left_join(job, by='업무명') %>%
dplyr::filter(연봉>=12000) %>%
dplyr::select(부서명,이름,연봉,업무명) %>%
dplyr::arrange(desc(연봉))
jobh %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,업무시작일 = START_DATE,업무종료일 = END_DATE,업무아이디 = JOB_ID,부서아이디 = DEPARTMENT_ID)
head(jobh)
loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,거리주소 = STREET_ADDRESS,우편번호 = POSTAL_CODE,도시 = CITY,주 = STATE_PROVINCE,국가아이디 = COUNTRY_ID)
head(loc)
reg %>%
dplyr::rename(지역아이디 = REGION_ID,지역명 = REGION_NAME)
head(reg)
보너스지급내역서 <- emp %>%
dplyr::filter(연봉 < 3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름, 직원아이디, 연봉,보너스)
emp %>%
dplyr::left_join(jobh, by='부서아이디') %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름,연봉) %>%
dplyr::arrange(desc(연봉))
reg %>%
dplyr::rename(지역아이디 = REGION_ID,지역명 = REGION_NAME)
head(reg)
loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,거리주소 = STREET_ADDRESS,우편번호 = POSTAL_CODE,도시 = CITY,주 = STATE_PROVINCE,국가아이디 = COUNTRY_ID)
head(loc)
jobh %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,업무시작일 = START_DATE,업무종료일 = END_DATE,업무아이디 = JOB_ID,부서아이디 = DEPARTMENT_ID)
job %>%
dplyr::rename(업무아이디 = JOB_ID,업무명 = JOB_TITLE,최소연봉 = MIN_SALARY,최대연봉 = MAX_SALARY)
dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID,부서명 = DEPARTMENT_NAME,매니저아이디 = MANAGER_ID,위치아이디 = LOCATION_ID)
cnt %>%
dplyr::rename(국가아이디 = COUNTRY_ID,국가명 = COUNTRY_NAME,지역아이디 = REGION_ID)
emp %>%
dplyr::left_join(dep, by='부서아이디') %>%
dplyr::left_join(job, by='업무명') %>%
dplyr::filter(연봉 >= 12000) %>%
dplyr::select(부서명,이름,연봉,업무명) %>%
dplyr::arrange(desc(연봉))
emp %>%
dplyr::left_join(dep, by='부서아이디') %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름,연봉) %>%
dplyr::arrange(desc(연봉))
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디)
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉)) %>%
dplyr::arrange(desc(연봉평균))
연봉평균 <- emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(부서별연봉평균 = mean(연봉)) %>%
dplyr::arrange(desc(부서별연봉평균))
View(연봉평균)
연봉평균 <- emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(부서별연봉평균 = mean(연봉,na.rm=T)) %>%
dplyr::arrange(desc(부서별연봉평균))
View(연봉평균)
dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID,부서명 = DEPARTMENT_NAME,매니저아이디 = MANAGER_ID,위치아이디 = LOCATION_ID)
job %>%
dplyr::rename(업무아이디 = JOB_ID,업무명 = JOB_TITLE,최소연봉 = MIN_SALARY,최대연봉 = MAX_SALARY)
연봉평균 <- emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(부서별연봉평균 = mean(연봉,na.rm=T)) %>%
dplyr::arrange(desc(부서별연봉평균))
View(연봉평균)
연봉평균 <- emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(부서별연봉평균 = mean(연봉,na.rm=T)) %>%
dplyr::arrange(desc(부서별연봉평균))
dep %>%
dplyr::distinct(부서명) %>%
count
dep <- data.frame(dbGetQuery(conn, "SELECT * FROM DEPARTMENTS"))
dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID,부서명 = DEPARTMENT_NAME,매니저아이디 = MANAGER_ID,위치아이디 = LOCATION_ID)
dep %>%
dplyr::distinct(부서명) %>%
count
count(dep)
dep %>%
dplyr::distinct(부서명) %>%
count(dep)
부서별연봉평균 <- emp %>%
dplyr::left_join(dep,by='부서명') %>%
dplyr::left_join(loc, by='도시') %>%
dplyr::group_by(부서명,도시,부서별사원수) %>%
dplyr::summarise(직원수=length(직원아이디))
부서별연봉평균 <- emp %>%
dplyr::left_join(dep,by='부서명') %>%
dplyr::left_join(loc, by='도시') %>%
dplyr::group_by(부서명,도시,부서별사원수) %>%
dplyr::summarise(부서별연봉평균 = mean(연봉,na.rm=T)) %>%
dplyr::arrange(desc(부서별연봉평균)) %>%
dplyr::summarise(직원수=length(직원아이디))
dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID, 부서명 = DEPARTMENT_NAME, 매니저아이디 = MANAGER_ID, 위치아이디 = LOCATION_ID)
dplyr::distinct(직원아이디) %>%
count(dep)
dep %>%
dplyr::distinct(직원아이디) %>%
count(dep)
dep %>%
dplyr::distinct(부서명) %>%
count(dep)
dep %>%
dplyr::distinct(부서명) %>%
count(dep)
dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID, 부서명 = DEPARTMENT_NAME, 매니저아이디 = MANAGER_ID, 위치아이디 = LOCATION_ID)
dep %>%
dplyr::distinct(부서명) %>%
count(dep)
dep %>%
dplyr::distinct(부서명) %>%
count(dep)
dep %>%
dplyr::distinct(부서명) %>%
count
부서별연봉평균 <- emp %>%
dplyr::left_join(dep,by='부서명') %>%
dplyr::left_join(loc, by='도시') %>%
dplyr::group_by(부서명,도시,부서별사원수) %>%
dplyr::summarise(부서별연봉평균 = mean(연봉,na.rm=T)) %>%
dplyr::arrange(desc(부서별연봉평균)) %>%
dplyr::summarise(직원수=length(직원아이디))
dplyr::distinct(직원아이디) %>%
count
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디')
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
head
emp %>%
dplyr::left_join(dep,by='부서명') %>%
dplyr::left_join(loc,by='위치아이디') %>%
head
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(사원수=length(직원아이디), 평균연봉=mean(연봉))
temp<- emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디), 평균연봉=mean(연봉))
View(temp)
temp<- emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디), 평균연봉=mean(연봉))
View(temp)
View(temp)
temp <- emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디), 평균연봉=mean(연봉))
temp <- emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),
평균연봉
=sprintf("%0.2f 만원", mean(연봉)))
mean(연봉)
View(temp)
temp <- dep %>%
dplyr::left_join(emp.by='부서아이디') %>%
dplyr::group_by(부서아이디, 부서명) %>%
dplyr::summarise(최대연봉=max(연봉))
View(temp)
install.packages("stringr")
install.packages("stringr")
library(stringr)
library(stringr)
test <- c('apple','banana','cherry','Apple','Pineapple',NA)
ifelse(stringr::str_detect(test,'A'),'Good','Bad')
temp <- dep %>%
dplyr::left_join(emp.by='부서아이디') %>%
dplyr::group_by(부서아이디, 부서명) %>%
dplyr::summarise(최대연봉=max(연봉))
View(temp)
temp <- emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),
평균연봉
=sprintf("%0.2f 만원", mean(연봉)))
mean(연봉)
test <- c('apple','banana','cherry','Apple','Pineapple',NA)
ifelse(stringr::str_detect(test,'A'),'Good','Bad')
emp %>%
select(부서아이디)
emp %>%
select(is.na(부서아이디))
emp %>%
select(is.na('부서아이디'))
is.na(emp %>%
select(부서아이디))
emp %>%
dplyr::filter(is.na(emp$부서아이디)) %>%
dplyr::select(이름,연봉,부서아이디)
emp %>%
dplyr::filter(is.na(emp$부서아이디)) %>%
dplyr::select(이름,연봉,부서아이디)
emp %>%
dplyr::filter(str_detect(emp$이름))
View(emp,이름)
View(emp,by=이름)
View(emp)
emp %>%
dplyr::filter(str_detect(emp$이름, 'S'),
str_detect(emp$이름, 'T')) %>%
dplyr::select(이름)
write.csv(보너스지급내역서,'보너스지급내역서.csv')
write.csv(보너스지급내역서,'보너스지급내역서.csv')
보너스지급내역서 <- emp %>%
dplyr::filter(연봉 < 3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름, 직원아이디, 연봉,보너스)
write.csv(보너스지급내역서,'보너스지급내역서.csv')
install.packages("KoNLP")
library(KoNLP)
library(rJava)
library(DBI)
library(RJDBC)
library(XML)
library(memoise)
library(KoNLP)
library(wordcloud)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rvest)
library(RColorBrewer)
library(data.table)
library(reshape)
library(stringr)
KoNLP::useSejongDic()
txt <- readLines('seoul.txt')
getwd()
txt <- readLines('seoul.txt')
getwd()
setwd("C:\\R\\project180721")
KoNLP::useSejongDic()
txt <- readLines('seoul.txt')
txt <- readLines("C:\\R\\project180721\\seoul.txt")
txt <- readLines('seoul.txt')
setwd("C:\\R\\PRO180728")
KoNLP::useSejongDic()
txt <- readLines("seoul.txt")
txt <- readLines("C:\\R\\PRO180728\\seoul.txt")
txt <- readLines("seoul.txt")
txt <- readLine("seoul.txt")
txt <- readLines("seoul.txt")
txt <- readLines("seoul.txt")
place <- sapply(txt,KoNLP::extractNoun(),USE.NAMES = F)
place <- sapply(txt,extractNoun,USE.NAMES = F)
plase
txt <- readLines("seoul.txt")
place <- sapply(txt,extractNoun,USE.NAMES = F)
plase
place
temp <- unilst(place)
temp <- unlist(place)
temp <- unlist(place)
place <- filter(function(x)(nchar(x)>=3),txt)
place <- gsub("이상","",place)
place
write(unlist(place))
test <- brewer.pal(9,"set1")
test <- brewer.pal(9,"setl")
wordcloud(names(table(place)),
freg = table(place),
scale = c(5,1),
rot.per = 0.25,
min.freq = 1,
random.order = F,
random.color = T,
colors = test)
test <- brewer.pal(9,place)
wordcloud(names(table(place)),
freg = table(place),
scale = c(5,1),
rot.per = 0.25,
min.freq = 1,
random.order = F,
random.color = T,
colors = test)
txt <- str_replace_all(txt, "\\w"," ")
nouns <- KoNLP::extractNoun(txt)
wordcount <- table(unlist(nouns))
df <- as.data.frame(wordcount, stringsAsFactors = F)
df <- rename(df, word=varl, freq=Freq)
df <- rename(df, word=Varl, freq=Freq)
df <- rename(df, words=Varl, freq=Freq)
df <- filter(df,nchar(words))
df <- filter(df,nchar(words) >= 2)
df <- filter(df,nchar(word) >= 2)
df <- rename(df, word=Varl, freq=Freq)
df <- filter(df,nchar(word) >= 2)
